generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite" // Or your preferred database provider
  url      = env("DATABASE_URL")
}

model Presentation {
  id           Int           @id @default(autoincrement())
  tcode        String
  chapter      Int
  exercise     String
  filename     String
  questionNo   Int
  part         Int
  name         String
  questionType String
  status       String
  slides       Json
  eqsSlides    Eqs[]
  canvasSlides CanvasSlide[]
}

model Eqs {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique
  startTime      Int
  endTime        Int
  type           String
  version        String
  template       String
  presentationId Int
  presentation   Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
  items          EqItem[]
}

model EqItem {
  id          Int    @id @default(autoincrement())
  uuid        String @unique
  name        String
  content     String
  showAt      Int?
  hideAt      Int?
  eqId        Int
  eq          Eqs    @relation(fields: [eqId], references: [id], onDelete: Cascade)
  itemExtra   Json
  sp          Sp[]
}

model Sp {
  id       Int    @id @default(autoincrement())
  type     String
  content  String
  eqItemId Int
  eqItem   EqItem @relation(fields: [eqItemId], references: [id], onDelete: Cascade)
}

model CanvasSlide {
  id             Int      @id @default(autoincrement())
  uuid           String   @unique
  startTime      Int
  endTime        Int
  type           String
  version        String
  template       String
  presentationId Int
  presentation   Presentation @relation(fields: [presentationId], references: [id], onDelete: Cascade)
  slideExtra     Json? // ADD DORT ORDER----
  angleItems     CanvasItem_Angle[]
  circleItems    CanvasItem_Circle[]
  dotItems       CanvasItem_Dot[]
  ellipseItems   CanvasItem_Ellipse[]
  iconItems      CanvasItem_Icon[]
  imageItems     CanvasItem_Image[]
  lineItems      CanvasItem_Line[]
  listItems      CanvasItem_List[]
  pieChartItems  CanvasItem_PieChart[]
  rayItems       CanvasItem_Ray[]
  rectangleItems CanvasItem_Rectangle[]
  spriteItems    CanvasItem_Sprite[]
  textItems      CanvasItem_Text[]
  triangleItems  CanvasItem_Triangle[]
}

model CanvasItem_Angle {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  opacity       Float
  color         String
  x             Float
  y             Float
  radius        Float
  ticks         Int
  startAngle    Float
  endAngle      Float
  lineWidth     Float
  showOrigin    Boolean
}

model CanvasItem_Circle {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x             Float
  y             Float
  radius        Float
  startAngle    Float
  endAngle      Float
  lineWidth     Float
  dash          Float?
  gap           Float?
  filled        Boolean
}

model CanvasItem_Dot {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x             Float
  y             Float
  label         String?
  radius        Float
  textColor     String?
  textSize      Float?
}

model CanvasItem_Ellipse {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x             Float
  y             Float
  radiusX       Float
  radiusY       Float
  rotation      Float
  startAngle    Float
  endAngle      Float
  lineWidth     Float
  filled        Boolean
}

model CanvasItem_Icon {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x             Float
  y             Float
  text          String?
  fontSize      Float?
  iconSize      Float?
  fontFamily    String?
  icon          String?
  showBg        Boolean?
  iconOnTop     Boolean?
  iconErrorX    Float?
  iconErrorY    Float?
  bgColor       String?
}

model CanvasItem_Image {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  opacity       Float
  color         String? // Not used as per your description
  rotation      Float?
  x             Float
  y             Float
  src           String?
  width         Float?
  height        Float?
}

model CanvasItem_Line {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x1            Float
  y1            Float
  x2            Float
  y2            Float
  lineWidth     Float
  rotation      Float?
  dash          Float?
  gap           Float?
}

model CanvasItem_List {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  opacity       Float
  color         String
  x             Float
  y             Float
  listArray     String[]
  fontSize      Float?
  fontFamily    String?
  lineGap       Float?
  indentation   Float?
}

model CanvasItem_PieChart {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  opacity       Float
  x             Float
  y             Float
  data          Json[] // Store the array of label, percentage, color as JSON
  showLabels    Boolean?
  labelFontSize Float?
  labelColor    String?
}

model CanvasItem_Ray {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x1            Float
  y1            Float
  x2            Float
  y2            Float
  arrowWidth    Float?
  arrowHeight   Float?
  startArrow    Boolean?
  endArrow      Boolean?
  lineWidth     Float
  dash          Float?
  gap           Float?
}

model CanvasItem_Rectangle {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x             Float
  y             Float
  width         Float
  height        Float
  rotation      Float?
  filled        Boolean
  lineWidth     Float?
  dash          Float?
  gap           Float?
}

model CanvasItem_Sprite {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  opacity       Float
  src           String?
  selectedItem  String?
  x             Float
  y             Float
  width         Float?
  height        Float?
  rotation      Float?
}

model CanvasItem_Text {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  color         String
  opacity       Float
  x             Float
  y             Float
  text          String?
  fontSize      Float?
  rotation      Float?
  fontFamily    String?
  width         Float?
  height        Float?
}

model CanvasItem_Triangle {
  id            Int         @id @default(autoincrement())
  uuid          String      @unique
  canvasSlideId Int
  canvasSlide   CanvasSlide @relation(fields: [canvasSlideId], references: [id], onDelete: Cascade)
  name          String
  opacity       Float
  color         String
  x1            Int
  y1            Int
  x2            Int
  y2            Int
  x3            Int
  y3            Int
  rotation      Float?
  lineWidth     Float?
  filled        Boolean?
  dash          Float?
  gap           Float?
}